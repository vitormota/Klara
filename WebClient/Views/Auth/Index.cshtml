@model WebClient_.Models.Register

@{
    ViewBag.Title = "Index";
}

@{
    System.Web.Script.Serialization.JavaScriptSerializer serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
}

<div id="fb-root"></div>
<script>

    //var data = @Html.Raw(Json.Encode(Model))

    window.fbAsyncInit = function () {
        FB.init({
            appId: 234060146782596,
            status: true,
            cookie: true, // enable cookies to allow the server to access the session
            xfbml: true  // parse XFBML
        });
        // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
        // for any authentication related change, such as login, logout or session refresh. This means that
        // whenever someone who was previously logged out tries to log in again, the correct case below
        // will be handled.
        FB.Event.subscribe('auth.authResponseChange', function (response) {
            // Here we specify what we do with the response anytime this event occurs.
            if (response.status === 'connected') {
                // The response object is returned with a status field that lets the app know the current
                // login status of the person. In this case, we're handling the situation where they
                // have logged in to the app.
                testAPI(response.authResponse.userID);
            } else if (response.status === 'not_authorized') {
                // In this case, the person is logged into Facebook, but not into the app, so we call
                // FB.login() to prompt them to do so.
                // In real-life usage, you wouldn't want to immediately prompt someone to login
                // like this, for two reasons:
                // (1) JavaScript created popup windows are blocked by most browsers unless they
                // result from direct interaction from people using the app (such as a mouse click)
                // (2) it is a bad experience to be continually prompted to login upon page load.
                FB.login();
            } else {
                // In this case, the person is not logged into Facebook, so we call the login()
                // function to prompt them to do so. Note that at this stage there is no indication
                // of whether they are logged into the app. If they aren't then they'll see the Login
                // dialog right after they log in to Facebook.
                // The same caveats as above apply to the FB.login() call here.
                FB.login();
            }
        });
    };

    // Load the SDK asynchronously
    (function (d) {
        var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
        if (d.getElementById(id)) { return; }
        js = d.createElement('script'); js.id = id; js.async = true;
        js.src = "//connect.facebook.net/en_US/all.js";
        ref.parentNode.insertBefore(js, ref);
    }(document));

    // Here we run a very simple test of the Graph API after login is successful.
    // This testAPI() function is only called in those cases.
    function testAPI(uid) {
        console.log('Welcome!  Fetching your information.... ');
        FB.api('/me', function (response) {
            document.getElementById("account_model_fb_id").value = response.id;
            document.getElementById("client_model_name").value = response.name;
            document.getElementById("client_model_address").value = response.hometown.name;
            //document.getElementById("client_model_email").value = response.email;
            console.log('Good to see you, ' + response.name + '.');
            console.log('Username: ' + response.username + '.');
            console.log('May I contact you here: ' + response.email + '.');
            var img_link = "http://graph.facebook.com/" + response.id + "/picture?type=large"
            var img = document.getElementById('user_photo');
            img.src = img_link;
            console.log(response);

        });
        FB.api({
            method: 'fql.query',
            query: 'SELECT name, pic FROM user WHERE uid=' + uid
        },
        function (response) {
            console.log(response);
        });
    }
</script>


<h2>Index</h2>

<!--
     Below we include the Login Button social plugin. This button uses the JavaScript SDK to
   present a graphical Login button that triggers the FB.login() function when clicked. -->

<div class="fb-login-button" data-max-rows="1" data-size="large" data-show-faces="false" data-auto-logout-link="true"></div>



@using (Ajax.BeginForm("registerUser", "Auth",
    new AjaxOptions { UpdateTargetId = "divRegistration" }))
{
    <fieldset>
        <legend>Registration info</legend>

        @Html.HiddenFor(model => model.account_model.fb_id)

        <div class="editor-label">
            @Html.LabelFor(model => model.client_model.name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.client_model.name)
        </div>

        @*<div class="editor-label">
            @Html.LabelFor(model => model.client_model.email)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.client_model.email)
        </div>*@

        <div class="editor-label">
            @Html.LabelFor(model => model.client_model.phone_number)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.client_model.phone_number)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.client_model.address)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.client_model.address)
        </div>
        <div>
            <label>Is this your tromba?</label>
            <img id="user_photo" />

        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.client_model.nif)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.client_model.nif)
        </div>
        <br />
        <input type="submit" value="Confirm" />
    </fieldset>
}